ResourceId:
  name: resourceId
  in: path
  required: true
  description: The resource ID.
  type: string
WebhookPostRequest:
  name: webhookBody
  in: body
  required: true
  description: New webhook.
  schema:
    type: object
    properties:
      url:
        example: https://example.com/example
        type: string
        description: The URL of the remote webhook.
      secret:
        example: <password>
        type: string
        description: If sign is true, and the secret attribute is omitted, LaunchDarkly will automatically generate a secret for you.
      sign:
        type: boolean
        description: If sign is false, the webhook will not include a signature header, and the secret can be omitted.
      on:
        type: boolean
        example: true
        description: Whether this webhook is enabled or not.
      name:
        type: string
        example: "Example hook"
        description: The name of the webhook.
      statements:
        $ref: "#/definitions/Statements"
      tags:
        type: array
        items:
          type: string
        example: []
        description: Tags for the webhook.
    required:
      - url
      - sign
      - on
FeatureFlagCopyBody:
  name: featureFlagCopyBody
  in: body
  required: true
  description: Copy feature flag configurations between environments.
  schema:
    type: object
    properties:
      source:
        $ref: "#/definitions/FeatureFlagCopyObject"
      target:
        $ref: "#/definitions/FeatureFlagCopyObject"
      comment:
        type: string
        description: comment will be included in audit log item for change.
        example: "This is a comment string"
      includedActions:
        type: array
        items:
          $ref: "#/definitions/CopyActions"
        description: Define the parts of the flag configuration that will be copied.
      excludedActions:
        type: array
        items:
          $ref: "#/definitions/CopyActions"
        description: Define the parts of the flag configuration that will not be copied.
FeatureFlagPostRequest:
  name: featureFlagBody
  in: body
  required: true
  description: Create a new feature flag.
  schema:
    type: object
    properties:
      name:
        type: string
        description: A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.
        example: "new test flag"
      key:
        type: string
        description: A unique key that will be used to reference the flag in your code.
        example: "new-test-flag"
      description:
        type: string
        description: A description of the feature flag.
        example: This flag controls whether test feature is turned on or not.
      variations:
        type: array
        items:
          $ref: "#/definitions/Variation"
        description: An array of possible variations for the flag.
      temporary:
        type: boolean
        description: Whether or not the flag is a temporary flag.
      tags:
        type: array
        items:
          type: string
          example: []
        description: Tags for the feature flag.
      includeInSnippet:
        type: boolean
        description: Whether or not this flag should be made available to the client-side JavaScript SDK.
    required:
      - name
      - key
      - variations
DestinationPostRequest:
  name: destinationBody
  in: body
  required: true
  description: Create a new data export destination.
  schema:
    type: object
    properties:
      name:
        type: string
        description: A human-readable name for your data export destination.
        example: Example Google Pub/Sub Destination
      kind:
        type: string
        description: The data export destination type. Available choices are kinesis, google-pubsub, mparticle, or segment.
        example: google-pubsub
        enum: [google-pubsub, kinesis, mparticle, segment]
      config:
        type: object
        description: destination-specific configuration.
        example: { "project": "cool-project", "topic": "test" }
      on:
        type: boolean
        example: true
        description: Whether the data export destination is on or not.
    required:
      - name
      - kind
      - config
UserSegmentPostRequest:
  name: userSegmentBody
  in: body
  required: true
  description: Create a new user segment.
  schema:
    type: object
    properties:
      name:
        type: string
        description: A human-friendly name for the user segment.
        example: "new segment"
      key:
        type: string
        description: A unique key that will be used to reference the user segment in feature flags.
        example: "new-segment"
      description:
        type: string
        description: A description for the user segment.
        example: "Users in this segment will have access to beta features."
      tags:
        type: array
        items:
          type: string
          example: []
        description: Tags for the user segment.
    required:
      - name
      - key
ProjectPostRequest:
  name: projectBody
  in: body
  required: true
  description: Project keys must be unique within an account.
  schema:
    type: object
    properties:
      name:
        type: string
        example: New Project
      key:
        type: string
        example: new-project
      includeInSnippetByDefault:
        type: boolean
        example: false
      tags:
        type: array
        items:
          type: string
        example: ["ops", "dev"]
      environments:
        type: array
        items:
          $ref: "#/definitions/EnvironmentPost"
        minLength: 1
    required:
      - name
      - key
EnvironmentPostRequest:
  name: environmentBody
  in: body
  required: true
  description: New environment.
  schema:
    $ref: "#/definitions/EnvironmentPost"
ProjectKey:
  name: projectKey
  in: path
  required: true
  description: The project key, used to tie the flags together under one project so they can be managed together.
  type: string
EnvironmentKey:
  name: environmentKey
  in: path
  required: true
  description: The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
  type: string
EnvironmentKeyQuery:
  name: env
  in: query
  required: false
  description: By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=production will restrict the returned configurations to just your production environment.
  type: string
SummaryQuery:
  name: summary
  in: query
  required: false
  description: By default in api version >= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned.
  type: string
ArchivedQuery:
  name: archived
  in: query
  required: false
  description: When set to 1, archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
  type: string
FeatureFlagKey:
  name: featureFlagKey
  in: path
  required: true
  description: The feature flag's key. The key identifies the flag in your code.
  type: string
CloneFlagKeyQuery:
  name: clone
  in: query
  required: false
  description: The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
  type: string
UserSegmentKey:
  name: userSegmentKey
  in: path
  required: true
  description: The user segment's key. The key identifies the user segment in your code.
  type: string
DestinationId:
  name: destinationId
  in: path
  required: true
  description: The data export destination ID.
  type: string
UserKey:
  name: userKey
  in: path
  required: true
  description: The user's key.
  type: string
Tag:
  name: tag
  in: query
  required: false
  description: Filter by tag. A tag can be used to group flags across projects.
  type: string
Limit:
  name: limit
  in: query
  required: false
  description: Pagination limit.
  type: integer
Query:
  name: q
  in: query
  required: false
  description: Search query.
  type: string
HMAC:
  name: h
  in: query
  required: false
  description: This parameter is required when following "next" links.
  type: string
ScrollId:
  name: scrollId
  in: query
  required: false
  description: This parameter is required when following "next" links.
  type: string
Offset:
  name: offset
  in: query
  required: false
  description: Specifies the first item to return in the collection.
  type: integer
After:
  name: after
  in: query
  required: false
  description: A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occured after this timestamp.
  format: int64
  type: integer
PatchRequest:
  name: patchDelta
  in: body
  required: true
  description: Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'
  schema:
    type: array
    items:
      $ref: "#/definitions/PatchOperation"
UserSettingsPutRequest:
  name: userSettingsBody
  in: body
  required: true
  schema:
    type: object
    properties:
      setting:
        type: boolean
        description: >
          The variation value to set for the user. Must match the variation type of
          the flag.
Before:
  name: before
  in: query
  required: false
  description: A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.
  format: int64
  type: integer
Q:
  name: q
  in: query
  required: false
  description: Text to search for. You can search for the full or partial name of the resource involved or fullpartial email address of the member who made the change.
  type: string
AuditLimit:
  name: limit
  in: query
  required: false
  description: A limit on the number of audit log entries to be returned, between 1 and 20.
  type: number
Spec:
  name: spec
  in: query
  required: false
  description: A resource specifier, allowing you to filter audit log listings by resource.
  type: string
MembersPostRequest:
  name: membersBody
  in: body
  required: true
  description: New members to invite.
  schema:
    type: array
    items:
      type: object
      properties:
        email:
          type: string
          example: exampleuser@email.com
        firstName:
          type: string
          example: Bob
        lastName:
          type: string
          example: Loblaw
        role:
          $ref: "#/definitions/Role"
        customRoles:
          type: array
          items:
            type: string
            description: The 20-hexdigit id or the key for a custom role.
            example: "revenue-team"
        inlineRole:
          $ref: "#/definitions/Statements"
      required:
        - email
MemberId:
  name: memberId
  in: path
  required: true
  description: The member ID.
  type: string
CustomRolePostRequest:
  name: customRoleBody
  in: body
  required: true
  description: New role or roles to create.
  schema:
    type: object
    properties:
      name:
        type: string
        description: Name of the custom role.
        example: "revenue team"
      description:
        type: string
        description: Description of the custom role.
        example: "Description of revenue team role here"
      key:
        type: string
        description: The 20-hexdigit id or the key for a custom role.
        example: "revenue-team"
      policy:
        type: array
        items:
          $ref: "#/definitions/Policy"
    required:
      - name
      - key
      - policy
CustomRoleKey:
  name: customRoleKey
  in: path
  required: true
  description: The custom role key.
  type: string
PatchWithComment:
  name: patchComment
  in: body
  required: true
  description: Requires a JSON Patch representation of the desired changes to the project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.
  schema:
    type: object
    properties:
      comment:
        type: string
        example: "This is a comment string"
      patch:
        type: array
        items:
          $ref: "#/definitions/PatchOperation"
PatchOnly:
  name: PatchOnly
  in: body
  required: true
  description: Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.
  schema:
    type: array
    items:
      $ref: "#/definitions/PatchOperation"
StreamSource:
  name: source
  in: path
  required: true
  description: The source of where the stream comes from.
  type: string
#  example: 'client'
EventType:
  name: type
  in: path
  required: true
  description: The type of event we would like to track.
  type: string
#  example: 'published'
EvaluationEnvId:
  name: envId
  in: path
  required: true
  description: The environment id for the flag evaluations in question.
  type: string
#  example: ''
EvaluationFlagKey:
  name: flagKey
  in: path
  required: true
  description: The key of the flag we want metrics for.
  type: string
#  example: ''
